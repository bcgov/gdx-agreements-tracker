# this is used to create a cronjob that will run a backup of the database
apiVersion: batch/v1
kind: CronJob
metadata:
  name: update-fiscal-year-job
  annotations:
    openshift.io/display-name: Cron job template for fiscal year update
    description: CronJob to update the current fiscal year in the gdx-agreements-tracker database
    tags: pmo,postgres,bdx-agreements-tracker,fiscal
  labels:
    template: "postgres-cron-cronjob"
    cronjob: "postgres-cron-fiscal-update"
spec:
  #schedule: "30 22 31 3 *" # 11:30pm March 31, Annually
  schedule: "*/45 * * * *" # every 10 minutes (for testing "hello world i'm updating the fiscal year")
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
    labels:
      template: "postgres-cron-cronjob"
      cronjob: "postgres-cron-fiscal-update"
    spec:
      template:
        metadata:
          labels:
            template: "postgres-cron-cronjob"
            cronjob: "postgres-cron-fiscal-update"
        spec:
          containers:
            - name: postgres-restore-runner
              image: "bcgovgdx/gdx-agreements-tracker-backup-container"
              command:
                - /bin/bash
                - "-c"
                - >
                  psql "postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST/$DATABASE_NAME"
                  <<EOF

                  DO \$\$
                  DECLARE
                      current_fiscal VARCHAR(5);
                      current_year INTEGER;
                      next_year INTEGER;
                      next_fiscal VARCHAR(5);
                  BEGIN
                      -- Get the current fiscal year
                      SELECT fiscal_year INTO current_fiscal FROM data.fiscal_year WHERE is_current = true;    -- Calculate the next fiscal year
                      current_year := CAST(SPLIT_PART(current_fiscal, '-', 2) AS INTEGER);
                      next_year := current_year + 1;
                      next_fiscal := CONCAT(RIGHT(current_year::TEXT, 2), '-', RIGHT(next_year::TEXT, 2));    -- Update is_current for the next fiscal year
                      UPDATE data.fiscal_year SET is_current = false;
                      UPDATE data.fiscal_year SET is_current = true WHERE fiscal_year = next_fiscal;
                  END \$\$;
                  SELECT * FROM data.fiscal_year;
                  UPDATE data.fiscal_year SET is_current = true WHERE fiscal_year = '22-23';
                  SELECT * FROM data.fiscal_year;

                  EOF
              env:
                - name: DATABASE_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: pmo-config-ddg76ttmch
                      key: POSTGRES_HOST
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: config
                      key: POSTGRES_DB
                - name: DATABASE_USER
                  valueFrom:
                    configMapKeyRef:
                      name: config
                      key: POSTGRES_USER
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: secrets
                      key: POSTGRES_PASSWORD
              volumeMounts:
                - name: backup-db
                  mountPath: /backups/
                - name: backup-verification
                  mountPath: /var/lib/pgsql/data
                - name: backup-config
                  mountPath: /backup.conf
                  subPath: backup.conf
          volumes:
            - name: backup-db
              persistentVolumeClaim:
                claimName: backup-db
            - name: backup-verification
              persistentVolumeClaim:
                claimName: backup-verification
            - name: backup-config
              configMap:
                name: backup-config
                items:
                  - key: backup.conf
                    path: backup.conf
                    # make sure all these configKeyRefs are correct
          dnsPolicy: "ClusterFirst"
          successfulJobHistoryLimit: 5
          failedJobHistoryLimit: 2
          restartPolicy: "Never"
          terminationGracePeriodSeconds: 30
          activeDeadlineSeconds: 1600
          serviceAccountName: "default"
          serviceAccount: "default"
