# this is used to create a cronjob that will run a backup of the database
kind: CronJob
apiVersion: batch/v1
metadata:
  name: update-current-year-cron
  labels:
    cronjob: postgres-cron-current-year
    template: postgres-cron-current-year-cronjob
spec:
  # change schedule to : "30 07 31 3 *"  (11:30pm March 31, Annually) eventually.
  # for now we test tonight at UTC 0730 March 5 (11:30pm March 4, America/Vancouver)
  schedule: "30 7 5 3 *"
  concurrencyPolicy: Forbid
  suspend: false
  jobTemplate:
    metadata:
      labels:
        cronjob: postgres-cron-current-year
        template: postgres-cron-current-year-cronjob
    spec:
      template:
        metadata:
          labels:
            cronjob: postgres-cron-current-year
            template: postgres-cron-current-year-cronjob
        spec:
          containers:
            - name: postgres-current-year-updater
              image: "bcgovgdx/gdx-agreements-tracker-backup-container"
              command:
                - /bin/bash
                - "-c"
                - >
                  psql
                  "postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST/$DATABASE_NAME"
                  <<EOF

                  DO \$\$ DECLARE
                      current_fiscal VARCHAR(5);
                      current_year INTEGER;
                      next_year INTEGER;
                      next_fiscal VARCHAR(5);
                  BEGIN
                      -- Get the current fiscal year
                      SELECT fiscal_year INTO current_fiscal FROM data.fiscal_year WHERE is_current = true;

                      -- Calculate the next fiscal year
                      current_year := CAST(SPLIT_PART(current_fiscal, '-', 2) AS INTEGER);
                      next_year := current_year + 1;
                      next_fiscal := CONCAT(RIGHT(current_year::TEXT, 2), '-', RIGHT(next_year::TEXT, 2));

                      -- Update is_current for the next fiscal year
                      UPDATE data.fiscal_year SET is_current = false;
                      UPDATE data.fiscal_year SET is_current = true WHERE fiscal_year = next_fiscal;

                      -- TESTING ONLY! Set the fiscal_year back to '22-23' again (testing purposes only)
                      IF NOT EXISTS (SELECT 1 FROM data.fiscal_year WHERE is_current = true) THEN
                      UPDATE data.fiscal_year SET is_current=true WHERE fiscal_year='22-23';
                      END IF;
                  END \$\$;

                  SELECT * FROM data.fiscal_year ORDER BY id ASC;

                  EOF
              env:
                - name: DATABASE_HOST
                  valueFrom:
                    configMapKeyRef: # make sure all these configKeyRefs are correct
                      name: config
                      key: POSTGRES_HOST
                - name: DATABASE_NAME
                  valueFrom:
                    configMapKeyRef: # make sure all these configKeyRefs are correct
                      name: config
                      key: POSTGRES_DB
                - name: DATABASE_USER
                  valueFrom:
                    configMapKeyRef: # make sure all these configKeyRefs are correct
                      name: config
                      key: POSTGRES_USER
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef: # make sure all these secretKeyRefs are correct
                      name: secrets
                      key: POSTGRES_PASSWORD
              imagePullPolicy: Always
          dnsPolicy: "ClusterFirst"
          successfulJobsHistoryLimit: 3
          failedJobsHistoryLimit: 2
          restartPolicy: "Never"
          terminationGracePeriodSeconds: 30
          activeDeadlineSeconds: 1600
          serviceAccountName: "default"
          serviceAccount: "default"
