# this is used to create a cronjob that will run a backup of the database
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cron
  annotations:
    openshift.io/display-name: Cron job templates for backups.
    description: CronJob to backup gdx-agreements-tracker database, https://developer.gov.bc.ca/Backup-Container.
    tags: backups,pmo,postgres,gdx-agreements-tracker
  labels:
    template: "postgres-cron-cronjob"
    cronjob: "postgres-cron-backup"
spec:
  schedule: "0 9 * * *" # 1 am PST / 0900 UTC
  concurrencyPolicy: Forbid
  successfulJobHistoryLimit: 3
  failedJobHistoryLimit: 2
  jobTemplate:
    metadata:
    labels:
      template: "postgres-cron-cronjob"
      cronjob: "postgres-cron-backup"
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            template: "postgres-cron-cronjob"
            cronjob: "postgres-cron-backup"
        spec:
          containers:
            - name: postgres-backup-runner
              image: "bcgovgdx/gdx-agreements-tracker-backup-container"
              command:
                - "/bin/bash"
                - "-c"
                - "/backup.sh -1"
              volumeMounts:
                - name: backup-db
                  mountPath: /backups/
                - name: backup-verification
                  mountPath: /var/lib/pgsql/data
                - name: backup-config
                  mountPath: /backup.conf
                  subPath: backup.conf
              env:
                - name: BACKUP_STRATEGY
                  value: rolling
                - name: BACKUP_DIR
                  valueFrom:
                    configMapKeyRef:
                      name: backup-config
                      key: BACKUP_DIR
                - name: MONTHLY_BACKUPS
                  value: "3"
                - name: DATABASE_USER
                  valueFrom:
                    configMapKeyRef:
                      name: config
                      key: POSTGRES_USER
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: secrets
                      key: POSTGRES_PASSWORD
          volumes:
            - name: backup-db
              persistentVolumeClaim:
                claimName: backup-db
            - name: backup-verification
              persistentVolumeClaim:
                claimName: backup-verification
            - name: backup-config
              configMap:
                name: backup-config
                items:
                  - key: backup.conf
                    path: backup.conf
                    # make sure all these configKeyRefs are correct
          dnsPolicy: "ClusterFirst"
          successfulJobHistoryLimit: 5
          failedJobHistoryLimit: 2
          restartPolicy: "Never"
          terminationGracePeriodSeconds: 30
          activeDeadlineSeconds: 1600
          serviceAccountName: "default"
          serviceAccount: "default"
