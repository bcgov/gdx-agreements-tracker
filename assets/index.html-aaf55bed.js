import{_ as r,r as i,o as d,c as l,a as e,b as a,d as o,e as n}from"./app-eac70fd5.js";const c={},s=n(`<p><img src="https://img.shields.io/badge/Lifecycle-Experimental-339999" alt="Lifecycle:Experimental"></p><h1 id="gdx-agreements-tracker" tabindex="-1"><a class="header-anchor" href="#gdx-agreements-tracker" aria-hidden="true">#</a> GDX Agreements Tracker</h1><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><ul><li><code>git clone https://github.com/bcgov/gdx-agreements-tracker.git</code></li></ul><h2 id="development-all-in-one-quick-start" tabindex="-1"><a class="header-anchor" href="#development-all-in-one-quick-start" aria-hidden="true">#</a> Development All-in-One Quick Start</h2><p>If you have Docker:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> gdx-agreements-tracker
<span class="token function">docker</span> compose up <span class="token parameter variable">--build</span> <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: If this is your first time starting the app, you can populate the database by running the provided migrations and seeders. See the README within the backend directory for more information.</p>`,8),h={href:"http://localhost/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://localhost/api/",target:"_blank",rel:"noopener noreferrer"},p=e("code",null,"frontend/.env",-1),g=n(`<p>Logs end up in <code>docker/logs/</code> in <code>backend</code>, <code>frontend</code>, and <code>web</code> subdirectories for your debugging convenience.</p><p>If you haven&#39;t done a <code>yarn install</code> or <code>npm install</code> in the frontend or backend subdirectories before executing the above, the docker-compose will handle that for you. This is useful if your local node/npm are not the right version.</p><h3 id="various-actions-useful-for-development" tabindex="-1"><a class="header-anchor" href="#various-actions-useful-for-development" aria-hidden="true">#</a> Various Actions Useful for Development</h3><h4 id="to-stop-and-remove-all-development-containers" tabindex="-1"><a class="header-anchor" href="#to-stop-and-remove-all-development-containers" aria-hidden="true">#</a> To Stop and Remove All Development Containers</h4><p><code>docker compose down</code></p><h4 id="to-update-packages-after-changing-package-json" tabindex="-1"><a class="header-anchor" href="#to-update-packages-after-changing-package-json" aria-hidden="true">#</a> To Update Packages After Changing <code>package.json</code></h4><ul><li>Frontend: <code>docker compose exec frontend yarn install</code></li><li>Backend: <code>docker compose exec backend npm install</code></li></ul><h4 id="to-stop-start-restart-remove-and-get-a-shell-inside-a-container" tabindex="-1"><a class="header-anchor" href="#to-stop-start-restart-remove-and-get-a-shell-inside-a-container" aria-hidden="true">#</a> To Stop, Start, Restart, Remove, and Get a Shell Inside a Container</h4><p>These are all demonstrated below on the <code>web</code> container, but can work on any of <code>frontend</code>, <code>backend</code>, or <code>db</code> as well, just change the container name on the lines below accordingly.</p><ul><li>Stop: <code>docker compose stop web</code></li><li>Start: <code>docker compose start web</code></li><li>Restart: <code>docker compose restart web</code></li><li>Remove: <code>docker compose rm web</code></li><li>Get a shell inside the container: <code>docker compose exec web /bin/sh</code></li></ul><h3 id="if-you-want-to-try-a-production-build-in-local-dev" tabindex="-1"><a class="header-anchor" href="#if-you-want-to-try-a-production-build-in-local-dev" aria-hidden="true">#</a> If You Want to Try a Production Build in Local Dev</h3><p>Open <code>frontend/Docker/nginx.conf</code> find the <code>location / {</code> section and <strong>uncomment the <code>try_files</code> line</strong> so the section looks like this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location / {
    # this will let you try out a static build on dev. delete build/index.html to go back to using the node server.
    # if the request can be served from the build directory, try it first, otherwise shunt it to the proxy.\\
    try_files $uri $uri/ @app_proxy;
    error_page 403 = @app_proxy;
    error_page 404 = @app_proxy;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then restart the web container:</p><ul><li><code>docker compose restart web</code></li></ul><p>If your containers are running, as per above:</p>`,16),m=e("li",null,[e("code",null,"docker compose exec frontend yarn build"),a(" and wait for the build to complete")],-1),b={href:"http://localhost/",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"To go back to live-refresh local development node server:",-1),v=e("li",null,[a("Delete the contents of "),e("code",null,"frontend/build"),a(" directory ("),e("code",null,"rm -rf build/*"),a(")")],-1),k={href:"http://localhost/",target:"_blank",rel:"noopener noreferrer"},x=n("<li>Permanently: <ul><li>Delete the contents of <code>frontend/build</code> directory</li><li>Comment out the <code>try_files</code> line in nginx.conf as per above by placing a <code>#</code> before <code>try_files</code></li><li>Restart the web container <ul><li><code>docker compose restart web</code></li></ul></li></ul></li>",1),y=n(`<h2 id="development-a-la-carte" tabindex="-1"><a class="header-anchor" href="#development-a-la-carte" aria-hidden="true">#</a> Development Ã  la Carte</h2><h3 id="front-end" tabindex="-1"><a class="header-anchor" href="#front-end" aria-hidden="true">#</a> Front End</h3><h4 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h4><ul><li><code>cd gdx-agreements-tracker/frontend</code></li><li><code>yarn install</code></li><li>Commands <ul><li><code>yarn start</code> - starts front end app on localhost:3000</li><li><code>yarn build</code> - builds for production deployment</li></ul></li></ul><h4 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> Build</h4><ul><li><code>cd gdx-agreements-tracker-front-end/frontend</code></li><li><code>docker build -t gdx-agreements-tracker-front-end:latest .</code></li><li>Test build by running <code>docker run -p 8081:80 --rm gdx-agreements-tracker-front-end</code></li></ul><h3 id="back-end" tabindex="-1"><a class="header-anchor" href="#back-end" aria-hidden="true">#</a> Back End</h3><h4 id="setup-1" tabindex="-1"><a class="header-anchor" href="#setup-1" aria-hidden="true">#</a> Setup</h4><ul><li><code>cd gdx-agreements-tracker/backend</code></li><li><code>npm i</code></li><li>Commands <ul><li><code>npm run start</code> - to start api server on localhost:8080</li><li><code>npm run test</code> - to run tests.</li></ul></li></ul><h4 id="build-1" tabindex="-1"><a class="header-anchor" href="#build-1" aria-hidden="true">#</a> Build</h4><ul><li><code>cd gdx-agreements-tracker/backend</code></li><li><code>docker build -t gdx-agreements-tracker-api:latest .</code></li></ul><h3 id="deploying-dev-test-tagging-the-app-api-and-postgres-db" tabindex="-1"><a class="header-anchor" href="#deploying-dev-test-tagging-the-app-api-and-postgres-db" aria-hidden="true">#</a> DEPLOYING DEV =&gt; TEST: Tagging the APP, API, and POSTGRES DB</h3><ul><li>login to oc on your local terminal, using the link to the login command by clicking your username in the upper-right of the openshift page</li><li>or use the web-based terminal: click the &#39; <em>&gt;_</em> &#39; icon at the top-right of your openshift interface next to the help icon</li></ul><p>enter the following:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> oc tag gdx-agreements-tracker-api-run:dev gdx-agreements-tracker-api-run:test
 oc tag gdx-agreements-tracker-app-run:dev gdx-agreements-tracker-app-run:test
 oc tag gdx-agreements-tracker-postgres-run:dev gdx-agreements-tracker-postgres-run:test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>you can observe progress back in the openshift window by clicking on the workflow for gdx-agreements-tracker-a**-run, and scrolling to the bottom.</li></ul>`,16);function _(w,T){const t=i("ExternalLinkIcon");return d(),l("div",null,[s,e("p",null,[a("The app is then available at "),e("a",h,[a("http://localhost/"),o(t)]),a(". For your reference, the API is available at "),e("a",u,[a("http://localhost/api/"),o(t)]),a(". The websocket for the frontend react is available at http://localhost:3000/ and as long as the "),p,a(" file (or other similar facility) specifies the WDS_SOCKET_PORT as 3000, the React live-refresh-upon-code-change feature should work in your browser.")]),g,e("ul",null,[m,e("li",null,[a("Refresh "),e("a",b,[a("http://localhost/"),o(t)])])]),f,e("ul",null,[e("li",null,[a("Temporarily: "),e("ul",null,[v,e("li",null,[a("Refresh "),e("a",k,[a("http://localhost/"),o(t)])])])]),x]),y])}const D=r(c,[["render",_],["__file","index.html.vue"]]);export{D as default};
