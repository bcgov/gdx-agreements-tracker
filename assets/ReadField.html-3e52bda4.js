import{_ as t,r as e,o,c as p,b as n,d as a,e as l,a as i}from"./app-667ecdc6.js";const c={},u=i(`<h1 id="readfield" tabindex="-1"><a class="header-anchor" href="#readfield" aria-hidden="true">#</a> ReadField</h1><p>The <code>ReadForm</code> component is a React component designed to render a form layout with read-only fields.</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><p>The <code>ReadField</code> component is designed to render a read-only field based on the specified properties. It serves as a flexible component capable of displaying various types of read-only content, such as text, checkboxes, multi-select options, or links, depending on the provided <code>type</code> prop. The primary purpose is to present information in a visually consistent and accessible manner.</p><p>Key features and purposes of the <code>ReadField</code> component:</p><ol><li><p><strong>Dynamic Rendering:</strong> The component dynamically renders different types of content based on the <code>type</code> prop. It supports rendering text fields, checkboxes, multi-select options, and links.</p></li><li><p><strong>Consistent Styling:</strong> The component ensures a consistent visual style for read-only fields, with attention to disabled states, color schemes, and layout.</p></li><li><p><strong>Accessibility:</strong> It includes accessibility features, such as providing additional helper text and error indicators when applicable. The use of color contrast and disabled states enhances the component&#39;s accessibility.</p></li><li><p><strong>Routing:</strong> In the case of links (<code>type</code> set to &quot;link&quot;), the component utilizes React Router&#39;s <code>useNavigate</code> function to enable navigation when a link is clicked.</p></li><li><p><strong>Modularity:</strong> The code structure and usage of modular components, such as <code>GridItem</code>, contribute to the overall maintainability and reusability of the code.</p></li></ol><p>Overall, the <code>ReadField</code> component is designed to be a versatile and user-friendly tool for rendering read-only information in a variety of formats within a larger application.</p><h4 id="the-readfield-component-accepts-the-following-props" tabindex="-1"><a class="header-anchor" href="#the-readfield-component-accepts-the-following-props" aria-hidden="true">#</a> The <code>ReadField</code> component accepts the following props:</h4><ol><li><p><strong>width (required):</strong></p><ul><li>Type: <code>string</code></li><li>Purpose: Specifies the width of the read-only field, allowing for flexible layout configurations.</li></ul></li><li><p><strong>title (required):</strong></p><ul><li>Type: <code>string</code></li><li>Purpose: Represents the title or label associated with the field, providing context for the displayed information.</li></ul></li><li><p><strong>value (required):</strong></p><ul><li>Type: <code>IReturnValue</code></li><li>Purpose: Holds the value to be displayed within the read-only field. The type <code>IReturnValue</code> suggests it can accommodate various data types.</li></ul></li><li><p><strong>type (optional):</strong></p><ul><li>Type: <code>string</code></li><li>Default: <code>undefined</code></li><li>Purpose: Determines the type of content to be rendered within the field. Valid options include &quot;multiSelect,&quot; &quot;checkbox,&quot; &quot;link,&quot; or undefined for a default text field.</li></ul></li><li><p><strong>helperText (optional):</strong></p><ul><li>Type: <code>string</code></li><li>Default: <code>undefined</code></li><li>Purpose: Provides additional text that can offer guidance or clarification related to the displayed information. This is particularly useful for conveying supplementary details or instructions.</li></ul></li><li><p><strong>error (optional):</strong></p><ul><li>Type: <code>boolean</code></li><li>Default: <code>undefined</code></li><li>Purpose: Indicates whether an error is associated with the field. If <code>true</code>, it triggers error styling and may display the provided <code>helperText</code> to convey relevant error information.</li></ul></li></ol><p>These props collectively allow the <code>ReadField</code> component to be highly configurable and adaptable to different use cases. The dynamic rendering of content based on the <code>type</code> prop enhances its versatility, making it suitable for various scenarios within a larger application.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReadField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./path/to/ReadFieldComponent&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IReturnValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;types&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">ExampleComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Example data</span>
  <span class="token keyword">const</span> <span class="token literal-property property">stringValue</span><span class="token operator">:</span> IReturnValue <span class="token operator">=</span> <span class="token string">&quot;Example Text&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">checkboxValue</span><span class="token operator">:</span> IReturnValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">multiSelectValue</span><span class="token operator">:</span> IReturnValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Option 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Option 2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">linkValue</span><span class="token operator">:</span> IReturnValue <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">&quot;/details/1&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Details 1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">&quot;/details/2&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Details 2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* Example of a default text field */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReadField</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50%<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Text Field<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>stringValue<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span><span class="token comment">/* Example of a checkbox field */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReadField</span></span>
        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50%<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Checkbox Field<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>checkboxValue<span class="token punctuation">}</span></span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span><span class="token comment">/* Example of a multi-select field */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReadField</span></span>
        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50%<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Multi-Select Field<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>multiSelectValue<span class="token punctuation">}</span></span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multiSelect<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span><span class="token comment">/* Example of a link field */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReadField</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50%<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Link Field<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>linkValue<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span><span class="token comment">/* Example with error and helper text */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReadField</span></span>
        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50%<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Error Field<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>stringValue<span class="token punctuation">}</span></span>
        <span class="token attr-name">error</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>This is an example error message.<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ExampleComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),r={id:"for-a-current-in-use-example-see-components-forms-readform",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#for-a-current-in-use-example-see-components-forms-readform","aria-hidden":"true"},"#",-1),k={href:"https://github.com/bcgov/gdx-agreements-tracker/tree/development/frontend/src/components/Forms/ReadForm",target:"_blank",rel:"noopener noreferrer"};function m(v,h){const s=e("ExternalLinkIcon");return o(),p("div",null,[u,n("h5",r,[d,a(" For a current in-use example, see: "),n("a",k,[a("components/Forms/ReadForm"),l(s)])])])}const f=t(c,[["render",m],["__file","ReadField.html.vue"]]);export{f as default};
