import{_ as s,r as t,o,c as i,b as n,d as a,e as p,a as l}from"./app-ba8df3b5.js";const c={},u=l(`<h1 id="moneyfield" tabindex="-1"><a class="header-anchor" href="#moneyfield" aria-hidden="true">#</a> MoneyField</h1><p>The <code>MoneyField</code> component is a custom text field for entering money amounts. It uses the AutoNumeric library to format the input as North American currency in real-time. The component shows a dollar sign before the input, fills the width of its parent element, and can show a label and helper text. It also validates the input and triggers an onChange function when the input changes.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>The <code>MoneyField</code> component is a custom text field designed to format numbers entered as monetary values.</p><p>Props this component will accept:</p><ul><li><code>onChange</code>: A function that is called when the value of the text field changes.</li><li><code>id</code>: A unique identifier for the text field.</li><li><code>value</code>: The initial value of the text field. (expects a Number)</li><li><code>label</code>: The label for the text field.</li><li><code>helperText</code>: The helper text that appears below the text field.</li><li><code>error</code>: A boolean indicating whether there is an error with the text field.</li></ul><p>The nested components <code>AutoNumeric</code> and <code>TextField</code> accept:</p><ul><li><p><strong>AutoNumeric</strong>: Inside a <code>useEffect</code> hook (which runs once on initial render due to the empty dependency array), it initializes a new instance of <code>AutoNumeric</code>. This is a library that provides real-time, automatic formatting for numeric inputs. It&#39;s configured with a specific output format and minimum/maximum values.</p></li><li><p><strong>TextField</strong>: The component returns a <code>TextField</code> component (from Material-UI) with various props set. Notably:</p><ul><li><code>fullWidth={true}</code>: This makes the text field take up the full width of its container.</li><li><code>variant=&quot;outlined&quot;</code>: This gives the text field an outlined appearance.</li><li><code>InputProps</code>: This prop is used to add a dollar sign (<code>$</code>) adornment to the start of the input field.</li><li><code>id</code>, <code>onChange</code>, <code>label</code>, <code>error</code>, and <code>helperText</code> are passed through from the props.</li></ul></li></ul><h2 id="styling" tabindex="-1"><a class="header-anchor" href="#styling" aria-hidden="true">#</a> Styling</h2><p>The <code>MoneyField</code> component utilizes the Material-UI <code>TextField</code> component and <code>InputAdornment</code> for its structure and styling:</p><ul><li><strong>TextField</strong> handles the input styling</li><li><strong>InputAdornment</strong> is nested inside the InputProps of the <code>TextField</code>: this prepends the currency symbol</li></ul><h2 id="default-behavior" tabindex="-1"><a class="header-anchor" href="#default-behavior" aria-hidden="true">#</a> Default Behavior</h2><p>When the user enters a dollar amount, the number will be formatted as North American currency. Any non-numeric values will be rejected instantly. The component converts the number entered to &#39;money&#39;, but will handle changes using a callback called &#39;onChange&#39;. This allows it to run validation routines against the number, and to make changes to other parts of the form in real time, e.g.: providing a sum of several <code>MoneyFields</code> on the same form.</p><p><em>(see Projects &gt; Project Details &gt; Budget &gt; ADD NEW)</em></p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MoneyField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./MoneyField&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Assuming MoneyField is exported from &#39;./MoneyField&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">ParentComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyField</span></span>
        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money-input<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span></span>
        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter Amount<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Please enter a monetary amount.<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">The current value is: </span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ParentComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),r={href:"https://github.com/bcgov/gdx-agreements-tracker/blob/2bd225b8a5c06a68cc11429a68db7e44ead9fc3c/frontend/src/components/Forms/Fields/index.tsx#L62",target:"_blank",rel:"noopener noreferrer"};function d(h,m){const e=t("ExternalLinkIcon");return o(),i("div",null,[u,n("blockquote",null,[n("p",null,[a("for a working implementation, look at "),n("a",r,[a("frontend/src/components/Forms/Fields/index.tsx"),p(e)])])])])}const v=s(c,[["render",d],["__file","MoneyField.html.vue"]]);export{v as default};
