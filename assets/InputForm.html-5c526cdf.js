import{_ as e,r as t,o,c as p,b as n,d as s,e as i,a as c}from"./app-8f081ff0.js";const l={},r=c(`<h1 id="input-form" tabindex="-1"><a class="header-anchor" href="#input-form" aria-hidden="true">#</a> Input Form</h1><p>This React component is designed to create a flexible and reusable input form using the Formik library for form management and validation. The component, named <code>InputForm</code>, serves as a wrapper that encapsulates the configuration and rendering of form fields based on the provided parameters.</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><ol><li><p><strong>Form Configuration</strong>: The component takes several parameters (<code>handleOnSubmit</code>, <code>initialValues</code>, <code>handleOnCancel</code>, <code>editFields</code>, <code>validationSchema</code>) to configure the form&#39;s behavior.</p></li><li><p><strong>Dynamic Field Rendering</strong>: The <code>editFields</code> array allows the dynamic rendering of input fields based on the specified configuration for each field. Each field is described by properties like <code>fieldName</code>, <code>fieldType</code>, <code>fieldLabel</code>, etc.</p></li><li><p><strong>Formik Integration</strong>: The component integrates with Formik, a popular form management library for React. It uses the <code>Formik</code> component to handle form state, form submission (<code>handleOnSubmit</code>), and form validation (<code>validationSchema</code>).</p></li><li><p><strong>Customization</strong>: The component allows customization of field behavior through various optional properties such as <code>customOnChange</code>. This enables the user to define custom logic when a specific input field changes.</p></li><li><p><strong>Form Layout and Buttons</strong>: The form structure is managed with a custom <code>FormLayout</code> component. Additionally, there&#39;s a <code>FormButtons</code> component responsible for rendering form buttons, including a cancellation button (<code>handleOnCancel</code>) and dynamic enablement based on form dirtiness (<code>dirty</code>).</p></li></ol><p>In summary, this <code>InputForm</code> component is a configurable and reusable form that leverages Formik for state management and validation. It provides a way to easily create input forms with dynamic fields and customizable behavior for different use cases within a React application.</p><h2 id="styling" tabindex="-1"><a class="header-anchor" href="#styling" aria-hidden="true">#</a> Styling</h2><p>The <code>InputForm</code> component utilizes Material-UI components for its structure and interaction.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>  <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> InputForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./InputForm&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Adjust the import path based on your project structure</span>

  <span class="token comment">// Assume you have a function for handling form submission</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleFormSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Logic to handle form submission</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Form submitted with values:&#39;</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Assume you have a function for handling form cancellation</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleFormCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Logic to handle form cancellation</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Form canceled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Sample initial form values</span>
  <span class="token keyword">const</span> initialFormValues <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// ... other fields</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Sample validation schema</span>
  <span class="token comment">// (Yup is what we use natively - search for &#39;validationSchema&#39; in this repo globally to see working examples)</span>
  <span class="token keyword">const</span> validationSchema <span class="token operator">=</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>

  <span class="token comment">// Sample configuration for editFields</span>
  <span class="token keyword">const</span> editFields <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">fieldName</span><span class="token operator">:</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fieldType</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fieldLabel</span><span class="token operator">:</span> <span class="token string">&#39;Username&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">fieldName</span><span class="token operator">:</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fieldType</span><span class="token operator">:</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fieldLabel</span><span class="token operator">:</span> <span class="token string">&#39;Email&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">fieldName</span><span class="token operator">:</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fieldType</span><span class="token operator">:</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fieldLabel</span><span class="token operator">:</span> <span class="token string">&#39;Password&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ... add more fields as needed</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">User Registration Form</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputForm</span></span>
          <span class="token attr-name">handleOnSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleFormSubmit<span class="token punctuation">}</span></span>
          <span class="token attr-name">initialValues</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>initialFormValues<span class="token punctuation">}</span></span>
          <span class="token attr-name">handleOnCancel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleFormCancel<span class="token punctuation">}</span></span>
          <span class="token attr-name">editFields</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>editFields<span class="token punctuation">}</span></span>
          <span class="token attr-name">validationSchema</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>validationSchema<span class="token punctuation">}</span></span>
        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),u={id:"for-a-current-in-use-example-see-components-forms-formrenderer",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#for-a-current-in-use-example-see-components-forms-formrenderer","aria-hidden":"true"},"#",-1),m={href:"https://github.com/bcgov/gdx-agreements-tracker/blob/development/frontend/src/components/Forms/FormRenderer/index.tsx",target:"_blank",rel:"noopener noreferrer"};function k(v,b){const a=t("ExternalLinkIcon");return o(),p("div",null,[r,n("h5",u,[d,s(" For a current in-use example, see: "),n("a",m,[s("components/Forms/FormRenderer"),i(a)])])])}const g=e(l,[["render",k],["__file","InputForm.html.vue"]]);export{g as default};
