import{_ as e,r as o,o as p,c,b as n,d as s,e as t,a as i}from"./app-afc8194d.js";const l={},r=n("h1",{id:"form-layout",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#form-layout","aria-hidden":"true"},"#"),s(" Form Layout")],-1),u=n("p",null,[s("The "),n("code",null,"FormLayout"),s(" component is a custom React component designed to act as a layout container for child components, specifically Forms. It has no styling of its own, though it uses a "),n("code",null,"Grid"),s(" component to wrap the children that are passed in as props.")],-1),d=n("h3",{id:"props",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#props","aria-hidden":"true"},"#"),s(" Props")],-1),k=n("code",null,"FormLayout",-1),m=n("code",null,"Grid",-1),h=n("code",null,"Grid",-1),v={href:"https://mui.com/material-ui/api/grid/",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"formLayout",-1),g=i(`<ul><li><code>children</code> (JSX.element): one or more components to be laid out in a grid <ul><li><code>container</code> (boolean): If true, the container will have the <code>Flex</code> container property. default false.</li><li><code>spacing</code> (Array(&lt;number|string&gt;) | number | object | string): default 0. This defines the space between the <code>item</code> components and can only be used on a <code>container</code> component, i.e. when the container prop above is true.</li></ul></li></ul><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><p>In the example below, you can see where <code>fields.map</code> is used to pass the <code>children</code> into the container component. each <code>ReadField</code> child gets its own set of props, but otherwise this container needs no other properties in order to perform its grid layout task.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IReturnValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReadField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ReadField&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;components/Forms/FormLayout&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">ReadForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  fields<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> IReturnValue<span class="token punctuation">,</span>
    type<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormLayout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> width<span class="token punctuation">,</span> title<span class="token punctuation">,</span> value<span class="token punctuation">,</span> type <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReadField</span></span>
            <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span>
            <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span>
            <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>
            <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span>
            <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ReadField</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormLayout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),f={id:"for-a-current-in-use-example-see-components-forms-inputform",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#for-a-current-in-use-example-see-components-forms-inputform","aria-hidden":"true"},"#",-1),_={href:"https://github.com/bcgov/gdx-agreements-tracker/blob/development/frontend/src/components/Forms/InputForm/index.tsx",target:"_blank",rel:"noopener noreferrer"};function w(x,F){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,u,d,n("p",null,[s("The "),k,s(" component wraps its child components in a "),m,s(" component from the Material-UI library, which is a layout component that arranges its child component(s) in a grid. The "),h,s(" component does the actual layout, and takes a "),n("a",v,[s("number of props"),t(a)]),s(", potentially, but in "),b,s(" we only utilize two of them.")]),g,n("h5",f,[y,s(" for a current in-use example, see: "),n("a",_,[s("components/Forms/InputForm"),t(a)])])])}const I=e(l,[["render",w],["__file","FormLayout.html.vue"]]);export{I as default};
