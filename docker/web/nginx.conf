# auto detects a good number of processes to run
worker_processes auto;

#Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 8000;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}

http {
    # how certain file types should be returned to the browser
    include       /etc/nginx/mime.types;
    # the default mime type to return to the browser if otherwise unspecified
    default_type  application/octet-stream;

    # Sets the path, format, and configuration for a buffered log write
    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent"';

    server {
        # listen on port 80
        listen 80;
        # where the root here
        root /var/www;
        # what file to server as index
        index index.html index.htm;

        #location / {
        #    try_files $uri $uri/ /index.html;
        #}

        # needed for docker to resolve container hostnames in variableized proxy_pass directive
        resolver 127.0.0.11 ipv6=off valid=10s;
        # permit redirect of 502 bad gateways
        recursive_error_pages on;

        location @tail_log {
            # Set chunks to unlimited, as the bodies can be huge
            client_max_body_size 1048576;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME /usr/bin/tail_$tail_location.sh;
            fastcgi_pass  unix:/run/fcgi.sock;
        }

        location / {
            ## this will let you try out a static build on dev. delete build/index.html to go back to using the node server.
            ## if the request can be served from the build directory, try it first, otherwise shunt it to the proxy.\
            #try_files $uri $uri/ @app_proxy;
            set $tail_location frontend;
            error_page 403 = @app_proxy;
            error_page 404 = @app_proxy;
        }
        location @app_proxy {
            # needed for docker to resolve container hostnames in variableized proxy_pass directive
            resolver 127.0.0.11 ipv6=off valid=10s;
            # when proxy_pass is set by variable, it won't prevent nginx startup if the upstream host is not up
            set $upstream_frontend "http://frontend:3000$request_uri";
            proxy_pass $upstream_frontend;
            proxy_set_header Host              $http_host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  $server_port;
            proxy_intercept_errors on;
            error_page 502 @tail_log;
        }

        location = /api {
            return 302 /api/;
        }
        location /api/ {
            set $tail_location backend;
            error_page 502 @tail_log;
            # needed for docker to resolve container hostnames in variableized proxy_pass directive
            resolver 127.0.0.11 ipv6=off valid=10s;
            # when proxy_pass is set by variable, it won't prevent nginx startup if the upstream host is not up
            set $upstream_api http://backend:8080;
            proxy_pass $upstream_api;
            proxy_set_header Host              $http_host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  $server_port;
            rewrite ^/api(/.*) $1 break;
        }
    }
}
