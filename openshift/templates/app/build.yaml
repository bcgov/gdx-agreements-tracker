kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: gdx-agreements-tracker-app-build
  resourceVersion: "v1.0.0"
  annotations:
    openshift.io/display-name: Nginx with Node build
    description: Build template for a Nginx with Node build
    tags: pmo,app,gdx,agreements-tracker
parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "gdx-agreements-tracker"
  - name: ROLE_NAME
    displayName: "Component Name"
    description: "The name of the application role."
    required: true
    value: "app"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "acd38d"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "tools"

  - name: GIT_URL
    displayName: "GIT Source Repo URL"
    description: "A GIT URL to your source code."
    required: true
    value: "https://github.com/bcgov/gdx-agreements-tracker-front-end.git"
  - name: GIT_REF
    displayName: "Git Reference"
    description: "The git reference or branch."
    required: true
    value: "development"
  - name: SOURCE_CONTEXT_DIR
    displayName: "Source Context Directory"
    description: "The source context directory."
    required: false
    value: "frontend"

  - name: IMAGE_BUILD
    displayName: "Image build name"
    description: "This is the name of the React app build image."
    required: true
    value: "build"
  - name: IMAGE_NGINX
    displayName: "Image Nginx name"
    description: "This is the name of the Nginx build image."
    required: true
    value: "nginx-runtime"
  - name: IMAGE_DEPLOY
    displayName: "Image deploy name"
    description: "This is the name of the deploy image."
    required: true
    value: "deploy"

objects:
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}

  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}

  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_DEPLOY}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_DEPLOY}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}

  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Compiles the React application for GDX agreements tracker.
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: DockerImage
            name: 'artifacts.developer.gov.bc.ca/docker-remote/library/node:16.0-alpine'
          pullSecret:
            name: artifactory-docker-remote-creds
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
        contextDir: ${SOURCE_CONTEXT_DIR}
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}:latest
      resources:
        limits:
          cpu: '1'
          memory: 4Gi
        requests:
          cpu: '1'
          memory: 2Gi
      postCommit: {}
      triggers:
        - type: ConfigChange
      runPolicy: Serial

  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Creates the Nginx runtime container.
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: DockerImage
            name: 'artifacts.developer.gov.bc.ca/docker-remote/library/nginx:stable'
          pullSecret:
            name: artifactory-docker-remote-creds
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
        contextDir: openshift/templates/nginx-runtime
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}:latest
      resources:
        limits:
          cpu: '1'
          memory: 4Gi
        requests:
          cpu: '1'
          memory: 2Gi
      triggers:
        - type: ConfigChange
      runPolicy: Serial

  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_DEPLOY}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Combines the Nginx runtime with the React build.
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-${IMAGE_DEPLOY}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: '${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}:latest'
      source:
        type: Dockerfile
        dockerfile: >-
          FROM ${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}:latest

          COPY * /tmp/app/dist/
          
          USER root
          
          RUN ln -sf /etc/nginx/publicServerEnvironmentSettings.js
          /tmp/app/dist/publicServerEnvironmentSettings.js
          
          USER 104
          
          CMD  /usr/libexec/s2i/run
        images:
          - from:
              kind: ImageStreamTag
              name: '${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}:latest'
            paths:
              - sourcePath: /app/build/.
                destinationDir: tmp
      output:
        to:
          kind: ImageStreamTag
          name: '${APP_NAME}-${ROLE_NAME}-${IMAGE_DEPLOY}:dev'
      resources:
        limits:
          cpu: '1'
          memory: 4Gi
        requests:
          cpu: '1'
          memory: 2Gi
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChange:
            from:
              kind: "ImageStreamTag"
              name: "${APP_NAME}-${ROLE_NAME}-${IMAGE_NGINX}:latest"
        - type: "ImageChange"
          imageChange:
            from:
              kind: "ImageStreamTag"
              name: "${APP_NAME}-${ROLE_NAME}-${IMAGE_BUILD}:latest"
      runPolicy: Serial
