# A basic deployment, useful for getting started with development. Don't use this directly for production, but gain inspiration from it, perhaps.
# To start it up, run: "docker compose up --build -d" without the quotes
# To stop it, run: "docker compose stop"
# To stop it and remove container instances, run: "docker compose down"
# Find the server at http://localhost/
version: "3"
x-env:
  POSTGRES_PASSWORD: &POSTGRES_PASSWORD postgres
  POSTGRES_USER: &POSTGRES_USER postgres
  POSTGRES_HOST: &POSTGRES_HOST db
  POSTGRES_PORT: &POSTGRES_PORT 5432
  POSTGRES_DATABASE: &POSTGRES_DATABASE gat_db
  DATABASE_AUTO_DEPLOY: &DATABASE_AUTO_DEPLOY 1
volumes:
  database:
services:
  frontend:
    build:
      context: frontend/
      dockerfile: Dockerfile.dev
    restart: always
    environment:
      # large node_modules directories exhaust all of the file watchers in docker. poll instead.
      # see: https://github.com/facebook/create-react-app/issues/1049#issuecomment-261731734
      CHOKIDAR_USEPOLLING: true
    command:
      [
        "sh",
        "-c",
        'if [ ! -d "node_modules" ]; then yarn install; fi; yarn start 2>&1 | tee /var/log/node.log > /dev/stdout',
      ]
    volumes:
      - ./frontend:/app
      - ./docker/log/frontend:/var/log
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - gat-node
  backend:
    build:
      context: backend/
      dockerfile: Dockerfile.dev
    restart: always
    environment:
      POSTGRES_PASSWORD: *POSTGRES_PASSWORD
      POSTGRES_USER: *POSTGRES_USER
      POSTGRES_HOST: *POSTGRES_HOST
      POSTGRES_PORT: *POSTGRES_PORT
      POSTGRES_DATABASE: *POSTGRES_DATABASE
      DATABASE_AUTO_DEPLOY: *DATABASE_AUTO_DEPLOY
    command:
      [
        "sh",
        "-c",
        'if [ ! -d "node_modules" ]; then npm install; fi; npm run start 2>&1 | tee /var/log/node.log > /dev/stdout',
      ]
    volumes:
      - ./backend:/usr/scr/app
      - ./docker/log/backend:/var/log

    depends_on:
      - db
    ports:
      - "8080:8080"
    networks:
      - gat-node
      - gat-db
  db:
    build: 
      dockerfile: Dockerfile
      context: openshift/templates/images/postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: *POSTGRES_PASSWORD
      POSTGRES_USER: *POSTGRES_USER
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - gat-db
    ports:
      - "15432:5432"
  web:
    build:
      context: docker/web/
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - ./frontend/build:/var/www
      - ./docker/web/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/log/web:/var/log/nginx
    #depends_on:
    #    - backend
    #    - frontend
    networks:
      - gat-node
    ports:
      - "80:80"

networks:
  gat-db:
    driver: bridge
  gat-node:
    driver: bridge
